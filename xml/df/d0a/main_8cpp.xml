<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="df/d0a/main_8cpp" kind="file" language="C++">
    <compoundname>main.cpp</compoundname>
    <includes local="no">SDL.h</includes>
    <includes local="no">SDL_image.h</includes>
    <includes local="no">hal/debug.h</includes>
    <includes local="no">hal/fileio.h</includes>
    <includes local="no">hal/video.h</includes>
    <includes local="no">nxdk/mount.h</includes>
    <includes local="no">pbkit/pbkit.h</includes>
    <includes local="no">windows.h</includes>
    <includes refid="d3/dc0/debug__output_8h" local="yes">debug_output.h</includes>
    <includes refid="d1/d8c/logger_8h" local="yes">logger.h</includes>
    <includes refid="d4/d3c/runtime__config_8h" local="yes">runtime_config.h</includes>
    <includes refid="dd/dab/test__driver_8h" local="yes">test_driver.h</includes>
    <includes refid="df/d43/test__host_8h" local="yes">test_host.h</includes>
    <includes refid="d8/d40/high__vertex__count__tests_8h" local="yes">tests/high_vertex_count_tests.h</includes>
    <includes refid="d7/d54/vertex__buffer__allocation__tests_8h" local="yes">tests/vertex_buffer_allocation_tests.h</includes>
    <incdepgraph>
      <node id="10">
        <label>debug_output.h</label>
        <link refid="d3/dc0/debug__output_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>logger.h</label>
        <link refid="d1/d8c/logger_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/main.cpp</label>
        <link refid="df/d0a/main_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>runtime_config.h</label>
        <link refid="d4/d3c/runtime__config_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>test_driver.h</label>
        <link refid="dd/dab/test__driver_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>test_host.h</label>
        <link refid="df/d43/test__host_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>tests/high_vertex_count_tests.h</label>
        <link refid="d8/d40/high__vertex__count__tests_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>tests/test_suite.h</label>
        <link refid="d6/d7a/test__suite_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>tests/vertex_buffer_allocation_tests.h</label>
        <link refid="d7/d54/vertex__buffer__allocation__tests_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SDL.h</label>
      </node>
      <node id="3">
        <label>SDL_image.h</label>
      </node>
      <node id="20">
        <label>chrono</label>
      </node>
      <node id="18">
        <label>configure.h</label>
      </node>
      <node id="25">
        <label>cstdint</label>
      </node>
      <node id="14">
        <label>fstream</label>
      </node>
      <node id="21">
        <label>functional</label>
      </node>
      <node id="4">
        <label>hal/debug.h</label>
      </node>
      <node id="5">
        <label>hal/fileio.h</label>
      </node>
      <node id="6">
        <label>hal/video.h</label>
      </node>
      <node id="28">
        <label>list</label>
      </node>
      <node id="22">
        <label>map</label>
      </node>
      <node id="16">
        <label>memory</label>
      </node>
      <node id="26">
        <label>nv2astate.h</label>
      </node>
      <node id="7">
        <label>nxdk/mount.h</label>
      </node>
      <node id="8">
        <label>pbkit/pbkit.h</label>
      </node>
      <node id="12">
        <label>printf.h</label>
      </node>
      <node id="23">
        <label>set</label>
      </node>
      <node id="11">
        <label>string</label>
      </node>
      <node id="17">
        <label>vector</label>
      </node>
      <node id="9">
        <label>windows.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="df/d0a/main_8cpp_1a64e2f4043b2ed0f0f4b7ec43a1a5e5bc" prot="public" static="no">
        <name>REG_TEST</name>
        <param><defname>CLASS_NAME</defname></param>
        <initializer>  {                                                                            \
    auto suite = std::make_shared&lt;CLASS_NAME&gt;(host, output_directory, config); \
    test_suites.push_back(suite);                                              \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="214" column="9"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="df/d0a/main_8cpp_1ae67329bb64313218f0f492f58d7ccae3" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* kLogFileName</definition>
        <argsstring></argsstring>
        <name>kLogFileName</name>
        <initializer>= &quot;results.txt&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="28" column="29" bodyfile="src/main.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d0a/main_8cpp_1acb39c6399adaa6c087861cc657dee648" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int kFramebufferWidth</definition>
        <argsstring></argsstring>
        <name>kFramebufferWidth</name>
        <initializer>= 640</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="30" column="18" bodyfile="src/main.cpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d0a/main_8cpp_1a817086409909840b1494436d5e82bf0f" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int kFramebufferHeight</definition>
        <argsstring></argsstring>
        <name>kFramebufferHeight</name>
        <initializer>= 480</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="31" column="18" bodyfile="src/main.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d0a/main_8cpp_1af7faef16fae4590f92c6978278f693f5" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int kBitsPerPixel</definition>
        <argsstring></argsstring>
        <name>kBitsPerPixel</name>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="32" column="18" bodyfile="src/main.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d0a/main_8cpp_1aa0034d92adc55836af916ec0958634af" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int kDelayOnFailureMilliseconds</definition>
        <argsstring></argsstring>
        <name>kDelayOnFailureMilliseconds</name>
        <initializer>= 4000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="34" column="22" bodyfile="src/main.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d0a/main_8cpp_1a395a6e3c048886b0ec41e1b094b67775" prot="public" static="no" mutable="no">
        <type>const UCHAR</type>
        <definition>const UCHAR kSMCSlaveAddress</definition>
        <argsstring></argsstring>
        <name>kSMCSlaveAddress</name>
        <initializer>= 0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="36" column="13" bodyfile="src/main.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d0a/main_8cpp_1af90ab1de7fc15f23afe5be261339f7ee" prot="public" static="no" mutable="no">
        <type>const UCHAR</type>
        <definition>const UCHAR kSMCRegisterPower</definition>
        <argsstring></argsstring>
        <name>kSMCRegisterPower</name>
        <initializer>= 0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="37" column="13" bodyfile="src/main.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d0a/main_8cpp_1a3ebda9513b2ea64ec6aba2bf682839f1" prot="public" static="no" mutable="no">
        <type>const UCHAR</type>
        <definition>const UCHAR kSMCPowerShutdown</definition>
        <argsstring></argsstring>
        <name>kSMCPowerShutdown</name>
        <initializer>= 0x80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="38" column="13" bodyfile="src/main.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="df/d0a/main_8cpp_1adc5e158b4ec4ef4c59b06f2603d116b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool EnsureDriveMounted</definition>
        <argsstring>(char drive_letter)</argsstring>
        <name>EnsureDriveMounted</name>
        <param>
          <type>char</type>
          <declname>drive_letter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="133" column="13" bodyfile="src/main.cpp" bodystart="133" bodyend="151" declfile="src/main.cpp" declline="40" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="df/d0a/main_8cpp_1a3837c464bf49c131ec7b2af0d5417406" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool LoadConfig</definition>
        <argsstring>(RuntimeConfig &amp;config, std::vector&lt; std::string &gt; &amp;errors)</argsstring>
        <name>LoadConfig</name>
        <param>
          <type><ref refid="d0/d98/classRuntimeConfig" kindref="compound">RuntimeConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>errors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="153" column="13" bodyfile="src/main.cpp" bodystart="153" bodyend="167" declfile="src/main.cpp" declline="41" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="df/d0a/main_8cpp_1a12b17794b734d21a44354814bc795eb6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RunTests</definition>
        <argsstring>(RuntimeConfig &amp;config, TestHost &amp;host, std::vector&lt; std::shared_ptr&lt; TestSuite &gt; &gt; &amp;test_suites)</argsstring>
        <name>RunTests</name>
        <param>
          <type><ref refid="d0/d98/classRuntimeConfig" kindref="compound">RuntimeConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d2/d3e/classTestSuite" kindref="compound">TestSuite</ref> &gt; &gt; &amp;</type>
          <declname>test_suites</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="181" column="13" bodyfile="src/main.cpp" bodystart="181" bodyend="208" declfile="src/main.cpp" declline="42" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="df/d0a/main_8cpp_1a3270df67667ede836b08618e0e4f7a54" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RegisterSuites</definition>
        <argsstring>(TestHost &amp;host, RuntimeConfig &amp;config, std::vector&lt; std::shared_ptr&lt; TestSuite &gt; &gt; &amp;test_suites, const std::string &amp;output_directory)</argsstring>
        <name>RegisterSuites</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type><ref refid="d0/d98/classRuntimeConfig" kindref="compound">RuntimeConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="d2/d3e/classTestSuite" kindref="compound">TestSuite</ref> &gt; &gt; &amp;</type>
          <declname>test_suites</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>output_directory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="210" column="13" bodyfile="src/main.cpp" bodystart="210" bodyend="224" declfile="src/main.cpp" declline="43" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="df/d0a/main_8cpp_1a704350e4ecd8b0deecaeba8ecac93d4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Shutdown</definition>
        <argsstring>()</argsstring>
        <name>Shutdown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="169" column="13" bodyfile="src/main.cpp" bodystart="169" bodyend="179" declfile="src/main.cpp" declline="45" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="df/d0a/main_8cpp_1a83fd25562f3679c53632f099ceb5f031" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__cdecl int</type>
        <definition>__cdecl int automount_d_drive</definition>
        <argsstring>(void)</argsstring>
        <name>automount_d_drive</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="47" column="24" declfile="src/main.cpp" declline="47" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="df/d0a/main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="49" column="5" bodyfile="src/main.cpp" bodystart="49" bodyend="131"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>XBOX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>Must<sp/>be<sp/>built<sp/>with<sp/>nxdk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL_image.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wignored-attributes&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hal/debug.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hal/fileio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hal/video.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nxdk/mount.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pbkit/pbkit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wmacro-redefined&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;debug_output.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;logger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;runtime_config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_driver.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_host.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tests/high_vertex_count_tests.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tests/vertex_buffer_allocation_tests.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>kLogFileName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;results.txt&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kFramebufferWidth<sp/>=<sp/>640;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kFramebufferHeight<sp/>=<sp/>480;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kBitsPerPixel<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kDelayOnFailureMilliseconds<sp/>=<sp/>4000;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UCHAR<sp/>kSMCSlaveAddress<sp/>=<sp/>0x20;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UCHAR<sp/>kSMCRegisterPower<sp/>=<sp/>0x02;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UCHAR<sp/>kSMCPowerShutdown<sp/>=<sp/>0x80;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EnsureDriveMounted(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>drive_letter);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>LoadConfig(<ref refid="d0/d98/classRuntimeConfig" kindref="compound">RuntimeConfig</ref>&amp;<sp/>config,<sp/>std::vector&lt;std::string&gt;&amp;<sp/>errors);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunTests(<ref refid="d0/d98/classRuntimeConfig" kindref="compound">RuntimeConfig</ref>&amp;<sp/>config,<sp/><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/>std::vector&lt;std::shared_ptr&lt;TestSuite&gt;&gt;&amp;<sp/>test_suites);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterSuites(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/><ref refid="d0/d98/classRuntimeConfig" kindref="compound">RuntimeConfig</ref>&amp;<sp/>config,<sp/>std::vector&lt;std::shared_ptr&lt;TestSuite&gt;&gt;&amp;<sp/>test_suites,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>output_directory);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Shutdown();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>__cdecl<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>automount_d_drive(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>automount_d_drive();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;Set<sp/>video<sp/>mode\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!XVideoSetMode(kFramebufferWidth,<sp/>kFramebufferHeight,<sp/>kBitsPerPixel,<sp/>REFRESH_DEFAULT))<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>video<sp/>mode\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(kDelayOnFailureMilliseconds);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>pb_init();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;pb_init<sp/>Error<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>status);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(kDelayOnFailureMilliseconds);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;Initializing...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>pb_show_debug_screen();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_Init(SDL_INIT_GAMECONTROLLER))<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>SDL_GAMECONTROLLER.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>SDL_GetError());</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_show_debug_screen();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(kDelayOnFailureMilliseconds);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(IMG_Init(IMG_INIT_PNG)<sp/>&amp;<sp/>IMG_INIT_PNG))<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>SDL_image<sp/>PNG<sp/>mode.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_show_debug_screen();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(kDelayOnFailureMilliseconds);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_kill();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><ref refid="d0/d98/classRuntimeConfig" kindref="compound">RuntimeConfig</ref><sp/>config;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>errors;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!LoadConfig(config,<sp/>errors))<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>config,<sp/>using<sp/>default<sp/>values.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>err<sp/>:<sp/>errors)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>err.c_str());</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pb_show_debug_screen();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EnsureDriveMounted(config.output_directory_path().front()))<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>mount<sp/>%s,<sp/>please<sp/>make<sp/>sure<sp/>output<sp/>directory<sp/>is<sp/>on<sp/>a<sp/>writable<sp/>drive.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.output_directory_path().c_str());</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_show_debug_screen();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(kDelayOnFailureMilliseconds);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_kill();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><ref refid="d6/d80/classTestHost_1a24b83c50f1d0b792c2089b41903d580e" kindref="member">TestHost::EnsureFolderExists</ref>(config.output_directory_path());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;TestSuite&gt;&gt;<sp/>test_suites;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref><sp/>host(kFramebufferWidth,<sp/>kFramebufferHeight);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>RegisterSuites(host,<sp/>config,<sp/>test_suites,<sp/>config.output_directory_path());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>errors;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!config.<ref refid="d0/d98/classRuntimeConfig_1ab234dceaf1d88e90e733321869a025d5" kindref="member">ApplyConfig</ref>(test_suites,<sp/>errors))<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debugClearScreen();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>apply<sp/>runtime<sp/>config:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>err<sp/>:<sp/>errors)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>err.c_str());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Sleep(kDelayOnFailureMilliseconds);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pb_kill();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>pb_show_front_screen();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>debugClearScreen();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>RunTests(config,<sp/>host,<sp/>test_suites);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>pb_kill();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EnsureDriveMounted(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>drive_letter)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nxIsDriveMounted(drive_letter))<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dos_path[4]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;x:\\&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>dos_path[0]<sp/>=<sp/>drive_letter;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>device_path[256]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XConvertDOSFilenameToXBOX(dos_path,<sp/>device_path)<sp/>!=<sp/>STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strstr(device_path,<sp/>R</highlight><highlight class="stringliteral">&quot;(\Device\Harddisk0\Partition)&quot;))<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>device_path[28]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nxMountDrive(drive_letter,<sp/>device_path);</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>LoadConfig(<ref refid="d0/d98/classRuntimeConfig" kindref="compound">RuntimeConfig</ref>&amp;<sp/>config,<sp/>std::vector&lt;std::string&gt;&amp;<sp/>errors)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RUNTIME_CONFIG_PATH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EnsureDriveMounted(RUNTIME_CONFIG_PATH[0]))<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;Ignoring<sp/>missing<sp/>config<sp/>at<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>RUNTIME_CONFIG_PATH);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config.<ref refid="d0/d98/classRuntimeConfig_1a14a49d34275e82a2b06bd365d1216c51" kindref="member">LoadConfig</ref>(RUNTIME_CONFIG_PATH,<sp/>errors))<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>config<sp/>at<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>RUNTIME_CONFIG_PATH);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>config.<ref refid="d0/d98/classRuntimeConfig_1a14a49d34275e82a2b06bd365d1216c51" kindref="member">LoadConfig</ref>(</highlight><highlight class="stringliteral">&quot;d:\\xemu_perf_tests_config.json&quot;</highlight><highlight class="normal">,<sp/>errors);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Shutdown()<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>HalInitiateShutdown<sp/>doesn&apos;t<sp/>seem<sp/>to<sp/>cause<sp/>Xemu<sp/>to<sp/>actually<sp/>close.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>never<sp/>sends<sp/>the<sp/>SMC<sp/>command<sp/>indicating<sp/>that<sp/>a<sp/>shutdown<sp/>should<sp/>occur<sp/>(at<sp/>least,<sp/>it<sp/>never<sp/>makes<sp/>it<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>`smc_write_data`<sp/>to<sp/>be<sp/>processed).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>HalInitiateShutdown();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>HalWriteSMBusValue(kSMCSlaveAddress,<sp/>kSMCRegisterPower,<sp/>FALSE,<sp/>kSMCPowerShutdown);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(30000);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunTests(<ref refid="d0/d98/classRuntimeConfig" kindref="compound">RuntimeConfig</ref>&amp;<sp/>config,<sp/><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/>std::vector&lt;std::shared_ptr&lt;TestSuite&gt;&gt;&amp;<sp/>test_suites)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>std::string<sp/>log_file<sp/>=<sp/>config.output_directory_path()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal"><sp/>+<sp/>kLogFileName;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>DeleteFile(log_file.c_str());</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>Logger::Initialize(log_file,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="de/d15/classTestDriver" kindref="compound">TestDriver</ref><sp/>driver(host,<sp/>test_suites,<sp/>kFramebufferWidth,<sp/>kFramebufferHeight,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>config.disable_autorun(),</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.enable_autorun_immediately());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>Logger::Log()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>driver.Run();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>Logger::Log()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>PrintMsg(</highlight><highlight class="stringliteral">&quot;Test<sp/>loop<sp/>completed<sp/>normally\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>Logger::Log().close();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config.enable_shutdown_on_completion())<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;Results<sp/>written<sp/>to<sp/>%s\n\nShutting<sp/>down<sp/>in<sp/>%d<sp/>seconds...\n&quot;</highlight><highlight class="normal">,<sp/>config.output_directory_path().c_str(),</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.reboot_or_shutdown_delay_ms()<sp/>/<sp/>1000);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_show_debug_screen();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(config.reboot_or_shutdown_delay_ms());</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>Shutdown();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>debugPrint(</highlight><highlight class="stringliteral">&quot;Results<sp/>written<sp/>to<sp/>%s\n\nRebooting<sp/>in<sp/>%d<sp/>seconds...\n&quot;</highlight><highlight class="normal">,<sp/>config.output_directory_path().c_str(),</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.reboot_or_shutdown_delay_ms()<sp/>/<sp/>1000);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_show_debug_screen();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(config.reboot_or_shutdown_delay_ms());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterSuites(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/><ref refid="d0/d98/classRuntimeConfig" kindref="compound">RuntimeConfig</ref>&amp;<sp/>runtime_config,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;TestSuite&gt;&gt;&amp;<sp/>test_suites,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>output_directory)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>config<sp/>=<sp/><ref refid="da/d85/structTestSuite_1_1Config" kindref="compound">TestSuite::Config</ref>{};</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REG_TEST(CLASS_NAME)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>auto<sp/>suite<sp/>=<sp/>std::make_shared&lt;CLASS_NAME&gt;(host,<sp/>output_directory,<sp/>config);<sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>test_suites.push_back(suite);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>REG_TEST(<ref refid="d3/d92/classHighVertexCountTests" kindref="compound">HighVertexCountTests</ref>)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>REG_TEST(<ref refid="da/de8/classVertexBufferAllocationTests" kindref="compound">VertexBufferAllocationTests</ref>)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>REG_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/main.cpp"/>
  </compounddef>
</doxygen>
